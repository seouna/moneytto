<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.itwillbs.moneytto.mapper.BankMapper">
	
	<!-- 토큰 정보(id, access_token, refresh_token, user_seq_no) 저장 -->
	<insert id="insertToken">
		INSERT
			INTO 
				account(
					id
					, user_seq_no
					, access_token
					, refresh_token
				)
			VALUES (
				#{id}
				, #{token.user_seq_no}
				, #{token.access_token}
				, #{token.refresh_token}
			);
	</insert>
	
	<!-- 계좌 인증 상태 변경(member 테이블의 아이디에 해당하는 account_auth_status 값을 'Y' 로 변경) -->
	<update id="updateAccountAuthStatus">
		UPDATE member
			SET
				member_auth_status = 'Y'
			WHERE
				member_id = #{member_id}
	</update>
	
	<!-- 계좌 정보 조회 - SELECT -->
	<select id="selectAccountById" resultType="hashmap">
		SELECT *
		FROM account
		WHERE id = #{member_id}
	</select>
	
	<select id="selectAccountByMember" resultType="hashmap">
		SELECT *
		FROM account
		WHERE id = #{member_id}
	</select>
	
	
	<update id="updateAccount">
		UPDATE	
			account
		SET
			fintech_use_num = #{fintech_use_num}
			, balance_amt = #{balance_amt}
		WHERE
			id = #{member_id}			
	</update>
	
	<!-- 관리자 계좌 상세 내역 파라미터 수정중 -->
	<insert id="insertAccountHistory">
		<selectKey keyProperty="trade_balance" resultType="java.lang.Long" order="BEFORE">
    		SELECT
    			COALESCE(MAX(trade_balance), 0) + #{trade_amount} AS trade_balance
    		FROM account_history
  		</selectKey>
		INSERT
			INTO 
				account_history(
					trade_code
					, trade_member_id
					, trade_amount
					, trade_type
					, trade_balance
					, trade_date
				)
			VALUES (
				 #{trade_code}
				, #{id}
				, #{trade_amount}
				, #{trade_type}
				, #{trade_balance}
				, #{trade_date}
			)
	</insert>
	
	<update id="updatePointAmount">
		UPDATE member
			SET member_point = (
				 SELECT t.member_point + #{trade_amount}
					  FROM (
					    SELECT member_point
					    FROM member
					    WHERE member_id = #{id}
					  ) AS t
			)
			WHERE member_id = #{id}
	</update>
	
<!-- 관리자 계좌===================================================== -->
	<!-- 계좌 내역 조회 -->
	<select id="selectAccountHistory" resultType="hashmap">
		SELECT ROW_NUMBER() OVER(ORDER BY trade_date DESC ) AS rownum, ah.*, count(*) over() AS totalCnt
			FROM account_history ah
				WHERE 1=1
				<if test="searchKeyword != null and !searchKeyword.equals('')">
					AND (trade_member_id LIKE '%${searchKeyword}%' OR trade_amount LIKE '%${searchKeyword}%')
				</if>
				<if test="typeSelect != null and !typeSelect.equals('') and !typeSelect.equals('전체')">
					AND trade_type = #{typeSelect}
				</if>
				<if test="startNum != null and !startNum.equals('')">
					LIMIT ${startNum}, ${endNum}
				</if>
	</select>
	
	<!-- 포인트 내역 조회 -->
	<select id="selectPointHistory"  resultType="hashmap">
		SELECT 
			ROW_NUMBER() OVER(ORDER BY point_date DESC ) AS rownum
			, ph.*
			, count(*) over() AS totalCnt
			, m.member_point
		FROM point_history ph
			LEFT JOIN member m
			ON ph.member_id = m.member_id 
			WHERE 1=1
			<if test="searchKeyword != null and !searchKeyword.equals('')">
				AND (member_id LIKE '%${searchKeyword}%' OR point_date LIKE '%${searchKeyword}%')
			</if>
			<if test="typeSelect != null and !typeSelect.equals('') and !typeSelect.equals('전체')">
				AND point_type = #{typeSelect}
			</if>
			<if test="startNum != null and !startNum.equals('')">
				LIMIT ${startNum}, ${endNum}
			</if>
	</select>
	
</mapper>










