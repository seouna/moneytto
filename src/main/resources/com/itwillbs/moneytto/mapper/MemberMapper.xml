<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.itwillbs.moneytto.mapper.MemberMapper">
	<!-- 회원가입 과정 -->
	<insert id="insertMember">
		INSERT INTO member
			VALUES(
				   #{member_id}
				   , #{member_name}
				   , #{member_nickname}
				   , #{member_pw}
				   , #{member_address}
				   , #{member_address_detail}
				   , #{member_bday}
				   , #{member_email}
				   , #{member_tel}
				   , '0'
				   , 'N' -- member_auth_status
				   , now() 
				   , #{member_image}	-- member_image
				   , '1' -- gradeScore 
				   , '0' -- declare_count
				   , POINT(${member_location})
				   , 'N' -- member_delete_status
			)
	</insert>
	
	<select id="checkId" resultType="hashmap">
		SELECT member_id
		 FROM member
			WHERE member_id = #{member_id} 
	</select>
	
	
	
	<select id="selectMember" resultType="hashmap">
		SELECT 	*
			FROM member
				WHERE member_id = #{member_id} 
	</select>
	
	<select id="selectCloseMemberList" resultType="hashmap">
		SELECT 	*
			FROM member
	</select>
	<!-- 비밀번호 재설정 -->
	<update id="renewPw">
		UPDATE member
			SET member_pw = #{member_pw}
				WHERE member_id = #{member_id}
	</update>
	
	
	<!-- 회원정보수정 -->
	<update id="updateMember" >
		UPDATE member
		SET
		member_nickname = #{member_nickname}
		,member_pw = #{member_pw2}
		,member_address = #{member_address}
		,member_address_detail = #{member_address_detail} 
		,member_bday = #{member_bday}
		,member_tel = #{member_tel}
		,member_image = #{member_image}
		,member_location = POINT(${member_location})
		WHERE member_id = #{member_id}
		
	</update>
	
	
	<!-- 비밀번호 찾기 회원 인증 -->
	<select id="phoneCheck" resultType="hashmap">
		SELECT *
			FROM member
				WHERE 
					member_id = #{member_id}
					AND member_name = #{member_name}
					AND member_bday = #{member_bday}
					AND member_tel = #{member_tel}
	</select>
	<select id="selectWish" resultType="hashmap">
		SELECT 	*
			FROM wish
				WHERE member_id = #{member_id}
				AND	wish_item_code = #{wish_item_code}
	</select>
		
	<insert id="insertWish">
		INSERT INTO 
				wish
		VALUES	(
					CONCAT(#{wish_item_code},'_',#{member_id})
					, #{member_id}
					, #{wish_item_code}
					, now()	
				)
	</insert>
	<delete id="deleteWish">
		DELETE FROM 
				wish
		WHERE 
				member_id = #{member_id}
				AND	wish_item_code = #{wish_item_code}
									
	</delete>
	
	<update id="updateAuth">
		UPDATE member
			SET member_auth_status = 'Y'
			WHERE member_id = #{member_id} 
	
	</update>
	<select id="selectKakao" resultType="hashmap">
		SELECT * FROM member
			WHERE member_email = #{email}
	</select>
	<select id="findId" resultType="hashmap">
		SELECT * FROM member
			WHERE member_name = #{member_name}
				AND member_bday = #{member_bday}
				AND member_tel = #{member_tel}
	</select>
<!-- 마이페이지 조회 -->
	<select id="selectSellItemList" resultType="hashmap">
		SELECT 	
			i.*
			, w.wish_code
			, im.image_name
		FROM
			item i
		LEFT JOIN 
               (SELECT
                  *
               FROM
                  wish
               WHERE
                  member_id = #{member_id}) w
         ON
            i.item_code = w.wish_item_code 
		LEFT JOIN (
				    SELECT *
				    FROM (
				        SELECT *,
				ROW_NUMBER() OVER (PARTITION BY table_code ORDER BY image_code) AS row_num
				        FROM images
				    ) subquery
				    WHERE row_num = 1
				) im ON i.item_code = im.table_code
		WHERE
			i.member_id = #{member_id}
	</select>
	
	<select id="selectWishItemList" resultType="hashmap">
		SELECT 	
			i.*
			, im.image_name
			, w.wish_code
		FROM
			wish w
		LEFT JOIN
			item i
		ON
			i.item_code = w.wish_item_code
		LEFT JOIN (
				    SELECT *
				    FROM (
				        SELECT *,
						ROW_NUMBER() OVER (PARTITION BY table_code ORDER BY image_code) AS row_num
				        FROM images
				    	) subquery
				    WHERE row_num = 1
				) im 
		ON
			w.wish_item_code = im.table_code
		WHERE
			w.member_id = #{member_id}
	</select>
	
	<select id="selectBuyItemList" resultType="hashmap">
		SELECT
		 	p.*
		 	, im.image_name
		 	,w.wish_code
		FROM
			market_paid p
		LEFT JOIN (
				    SELECT *
				    FROM (
				        SELECT *,
				ROW_NUMBER() OVER (PARTITION BY table_code ORDER BY image_code) AS row_num
				        FROM images
				    ) subquery
				    WHERE row_num = 1
				) im ON p.item_code = im.table_code
		LEFT JOIN 
               (SELECT
                  *
               FROM
                  wish
               WHERE
                  member_id = #{member_id}) w
         ON
			p.item_code = w.wish_item_code
		WHERE
			buy_id = #{member_id} 
	</select>
<!-- 마이페이지 조회 -->	
	
	<update id="updateQuitMember" >
		UPDATE 
			member
		SET
			member_name ='탈퇴한 회원입니다.'
			,member_nickname = '탈퇴한 회원입니다.'
			,member_email = ''
			,member_address = ''
			,member_address_detail = '' 
			,member_bday = ''
			,member_tel = ''
			,member_image = 'http://c3d2212t3.itwillbs.com/images/member/profile_default.jpg'
			,member_delete_status = 'N'
		WHERE
			 member_id = #{member_id}
		
	</update>
	
	<update id="updatePoint">
		UPDATE 
			member
		SET
			member_point = #{point}
		WHERE
			member_id = #{id}
	</update>
	
	<update id="updateDeposit">
		UPDATE member m 
			LEFT JOIN auction_enroll ae 
				ON m.member_id  = ae.member_id 
				SET 
					m.member_point = CAST(member_point AS UNSIGNED) + #{deposit}
				WHERE 
					auction_code = #{auction_code} and m.member_nickname != #{success_id}
	</update>
	<select id="selectMemberGradeByMember" resultType="hashmap">
		SELECT 
			grade_id ,grade_name, grade_img 
		FROM
			 grades g
		WHERE
			 grade_id = (CASE  
							WHEN #{grade_score} = 0 		THEN '10'
							WHEN #{grade_score} >= 5000		THEN '9'
							WHEN #{grade_score} >= 3000		THEN '8'
							WHEN #{grade_score} >= 1000		THEN '7'
							WHEN #{grade_score} >= 500		THEN '6'
							WHEN #{grade_score} >= 250		THEN '5'
							WHEN #{grade_score} >= 100		THEN '4'
							WHEN #{grade_score} >= 50		THEN '3'
							WHEN #{grade_score} >= 10		THEN '2'
							WHEN #{grade_score} >= 1		THEN '1'
							WHEN #{grade_score} >= -5		THEN '0'
							ELSE '1'  
						END);
	</select>
	<select id="selectMemberGradeById" resultType="hashmap">
		SELECT 
			grade_id ,grade_name, grade_img 
		FROM
			 grades g
		WHERE
			 grade_id = (CASE  
							WHEN #{grade_score} = 0 		THEN '10'
							WHEN #{grade_score} >= 5000		THEN '9'
							WHEN #{grade_score} >= 3000		THEN '8'
							WHEN #{grade_score} >= 1000		THEN '7'
							WHEN #{grade_score} >= 500		THEN '6'
							WHEN #{grade_score} >= 250		THEN '5'
							WHEN #{grade_score} >= 100		THEN '4'
							WHEN #{grade_score} >= 50		THEN '3'
							WHEN #{grade_score} >= 10		THEN '2'
							WHEN #{grade_score} >= 1		THEN '1'
							WHEN #{grade_score} >= -5		THEN '0'
							ELSE '1'  
						END);
	</select>
	
	<select id="selectImage" resultType="string">
		SELECT 
			member_image
		FROM 
			member
		WHERE member_nickname = #{name}
		
	</select>
	
</mapper>
